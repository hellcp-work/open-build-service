.pb-1
  %p.m-0
    = @patchinfo.summary
    = category
    = rating
    = stopped
    = retracted
    = link_to("#patchinfo-collapse-#{@path.parameterize}", 'data-bs-toggle': 'collapse', 'aria-expanded': false ) do
      %span.collapser
        (see less)
      %span.expander
        (see more)
  .collapse{ id: "patchinfo-collapse-#{@path.parameterize}" }
    %p
      Patch created by
      - if (packager = @patchinfo.packager_object)
        = render UserAvatarComponent.new(packager.login)
      - else
        = @patchinfo.packager
      - if @patchinfo.incident
        in the maintenance incident request
        - if (incident = BsRequest.find_by(number: @patchinfo.incident))
          = link_to(request_show_path(incident)) do
            \##{@patchinfo.incident}
        - else
          \##{@patchinfo.incident}

    - if @patchinfo.description.present?
      %h6 Patch description
      %p= @patchinfo.description

    - if @patchinfo.message.present?
      %h6 Pop-up message
      %p= @patchinfo.message

    - if @patchinfo.releasetargets.present?
      %h6 Targeted for release in the following projects
      %ul
        - @patchinfo.releasetargets.each do |releasetarget|
          %li
            - if (project = Project.find_by_name(releasetarget.project))
              = link_to(project_show_path(project)) do
                = releasetarget.project
            - else
              = releasetarget.project
            - if releasetarget.repository
              Repository:
              = releasetarget.repository

    - if @patchinfo.binaries.present?
      %h6 Affected binaries
      %ul
        - @patchinfo.binaries.each do |binary|
          %li= binary

    - if @patchinfo.packages.present?
      %h6 Affected packages
      %ul
        - @patchinfo.packages.each do |package|
          %li= package

    - if @patchinfo.issues.present?
      %h6 Issues related to the patch
      %ul
        - @patchinfo.issues.each do |issue_hash|
          - if (issue = Issue.find_or_create_by_name_and_tracker(issue_hash.id, issue_hash.tracker))
            %li
              = link_to(issue.url) do
                #{issue.label}:
                = issue.state
                = issue.summary

    - properties.each do |property|
      %span.badge.text-bg-info= property
    %p.text-muted
      Based on
      = link_to(@path) do
        patchinfo
      present in this request
